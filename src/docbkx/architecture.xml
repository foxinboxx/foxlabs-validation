<?xml version="1.0" encoding="utf-8"?>
<chapter xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="architecture">
    <title>Architecture</title>
    
    <para>
        On the following class diagram you will see the key classes of this
        framework.
        
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/class-diagram.png" format="PNG"/>
            </imageobject>
        </mediaobject>
        
        Next sections describe all these classes in more details.
    </para>
    
    <section xml:id="validation-components">
        <title xml:id="validation-components.title">Validation components</title>
        
        <para>
            Validation components are basic blocks of this framework. The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validation.html"><literal>Validation</literal></link>
            interface defines generic abstraction of the validation component.
            For the moment there are two component types:
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/constraint/Constraint.html"><literal>Constraint</literal></link>
            and
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/converter/Converter.html"><literal>Converter</literal></link>.
        </para>
        
        <para>
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidationContext.html"><literal>ValidationContext</literal></link>
            interface provides information about current validation state to
            the components. Implementation of that interface passed to all
            validation methods of the components.
        </para>
        
        <para>
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/constraint/Constraint.html"><literal>Constraint</literal></link>
            interface defines component, suitable for check whether a test value
            conforms to some rules or not. Also it allows to modify (correct)
            test value if it is possible. If for some reason test value doesn't
            fit the validation rules and it cannot be corrected then the result
            of validation should be
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/constraint/ConstraintViolationException.html"><literal>ConstraintViolationException</literal></link>.
            In other cases constraint should return (possibly modified) test value.
        </para>
        
        <para>
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/converter/Converter.html"><literal>Converter</literal></link>
            interface defines component, suitable for convert value to and from
            text representation. If for some reason value cannot be converted
            from string representation then the result of conversion should be
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/converter/MalformedValueException.html"><literal>MalformedValueException</literal></link>.
            Conversion of a value to string representation doesn't assume any exceptions.
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidationContext.html#isLocalizedConvert()"><literal>ValidationContext.isLocalizedConvert()</literal></link>
            method specifies if localized representation is required.
        </para>
    </section>
    
    <section xml:id="validation-messages">
        <title xml:id="validation-messages.title">Validation messages</title>
        
        <para>
            Validation component may provide error message that will be used when
            validation process fails. That message may depend on validation
            context or component parameters.
            Because of that
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validation.html"><literal>Validation</literal></link>
            interface defines two methods that allow to obtain required
            information for error message generation. The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validation.html#getMessageTemplate(org.foxlabs.validation.ValidationContext)"><literal>Validation.getMessageTemplate()</literal></link>
            method allows to obtain localized error message template. The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validation.html#appendMessageArguments(org.foxlabs.validation.ValidationContext, java.util.Map)"><literal>Validation.appendMessageArguments()</literal></link>
            method provides arguments to be substituted into the error message
            template. Locale of the error message and its arguments should be
            obtained from the method
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidationContext.html#getMessageLocale()"><literal>ValidationContext.getMessageLocale()</literal></link>.
        </para>
        
        <para>
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/message/MessageResolver.html"><literal>MessageResolver</literal></link>
            used for resolving localized message templates. That abstraction
            allows to store error messages anywhere. By default
            <literal>org/foxlabs/validation/resource/validation-messages</literal>
            resource bundle is used. Validation components could use
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidationContext.html#resolveMessage(java.lang.String)"><literal>ValidationContext.resolveMessage()</literal></link>
            to obtain error message templates. Fully qualified class name of
            the validation component usually used as message key.
        </para>
        
        <para>
            Having localized error message template and its arguments, goal of the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/message/MessageBuilder.html"><literal>MessageBuilder</literal></link>
            is to build error message. By default the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/message/DefaultMessageBuilder.html"><literal>DefaultMessageBuilder</literal></link>
            is used.
        </para>
    </section>
    
    <section xml:id="validation-exceptions">
        <title>Validation exceptions</title>
        
        <para>
            Each validation component can throw
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ViolationException.html"><literal>ViolationException</literal></link>
            that contains necessary information about validation state on the
            moment of violation, invalid value and source component which
            generates exception. In case of multiple violations the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidationException.html"><literal>ValidationException</literal></link>
            represents full stack of violations with detailed information about
            each violation.
        </para>
        
        <para>
            Errors in the validation component declaration propagated as the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidationDeclarationException.html"><literal>ValidationDeclarationException</literal></link>
            and its subclasses.
        </para>
    </section>
    
    <section xml:id="entity-metadata">
        <title>Entity metadata</title>
        
        <para>
            Metadata needed to describe the entity and its properties,
            constraints and converters imposed on them.
        </para>
        
        <para>
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/metadata/EntityMetaData.html"><literal>EntityMetaData</literal></link>
            interface defines entity metadata. The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/metadata/PropertyMetaData.html"><literal>PropertyMetaData</literal></link>
            interface defines property metadata. For Java Beans and POJOs there is the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/metadata/BeanMetaData.html"><literal>BeanMetaData</literal></link>
            class that allows to gather all information about entity from annotations.
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/metadata/MapMetaData.html"><literal>MapMetaData</literal></link>
            class can be used to describe metadata for validation of the
            <literal>java.util.Map</literal> entities.
        </para>
    </section>
    
    <section xml:id="validator-and-its-factory">
        <title>Validator and its factory</title>
        
        <para>
            All architecture components binded together through the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validator.html"><literal>Validator</literal></link>
            class. That class has a set of shortcut methods to perform
            validation with default parameters. If other configuration is
            required then the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validator.html#newContext()"><literal>Validator.newContext()</literal></link>
            method should be used. Returned
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validator.ContextBuilder.html"><literal>Validator.ContextBuilder</literal></link>
            instance allows to configure validation parameters as you need.
        </para>
        
        <para>
            To create a new validator the
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ValidatorFactory.html"><literal>ValidatorFactory</literal></link>
            should be used. The main purpose of that factory is maintaining
            validators configuration. You can configure factory once and then
            create validators with different metadata.
        </para>
        
<programlisting language="java"><![CDATA[
...
ValidatorFactory factory = ValidatorFactory.getDefault();
Validator<Account> validator = factory.newValidator(Account.class);
Validator<Account>.ContextBuilder context = validator.newContext();
context.setLocale(Locale.ROOT).setFailFast(true).validateEntity(account);
...
]]></programlisting>
    </section>
    
    <section xml:id="validating-groups">
        <title>Validating groups</title>
        
        <para>
            Validating groups are string identifiers that can be applied to
            constraints only and allow to check certain constraints defined on
            the element. If constraint is not binded to any validating group
            then it will be binded to default group (empty string)
            automatically. By default validation will be performed for all
            defined constraints.
        </para>
        
        <para>
            The
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/Validator.ContextBuilder.html#setValidatingGroups(java.lang.String...)"><literal>Validator.ContextBuilder.setValidatingGroups()</literal></link>
            method allows to change validating groups.
            
<programlisting language="java"><![CDATA[
...
Validator<Account>.ContextBuilder context = validator.newContext();
context.setValidatingGroups("correct", "update").validateEntity(account);
...
]]></programlisting>
        </para>
    </section>
</chapter>
