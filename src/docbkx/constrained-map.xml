<?xml version="1.0" encoding="utf-8"?>
<chapter xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="constrained-map">
    <title>Constrained map</title>
    
    <para>
        This validation framework is not tied only to validating Java Beans or
        POJOs. You can validate any entity having <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/metadata/EntityMetaData.html"><literal>EntityMetaData</literal></link>
        descriptor. So it is a good idea to validate <literal>java.util.Map</literal> entities.
    </para>
    
    <para>
        The <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ConstrainedMap.html"><literal>ConstrainedMap</literal></link>
        class allows to maintain a set of properties with constraints. It also
        provides modifications in transaction-like manner and convertation of
        property values into and from string representation. More over, this
        class is thread-safe and suitable for maintaining configuration
        properties in multithreaded environment such as web application.
    </para>
    
    <para>
        The following example will show how you can create such map.
        <example xml:id="constrained-map-building">
            <title>Creating constrained map</title>
            
<programlisting language="java"><![CDATA[
import org.foxlabs.validation.ConstrainedMap;
import org.foxlabs.validation.ValidatorFactory;
import org.foxlabs.validation.metadata.MapMetaData;

import static org.foxlabs.validation.constraint.ConstraintFactory.*;

@SuppressWarnings("unchecked")
public class Configuration {
    
    public static final ConstrainedMap SETTINGS;
    
    static {
        MapMetaData.Builder builder = new MapMetaData.Builder();
        
        builder.property("admin.email", String.class, join(despace(), notBlank(), emailAddress()), "x@y.z")
               .property("session.timeout", Integer.class, join(notNull(), range(10, 1440)), 30)
               .property("output.encoding", String.class, supportedEncoding(), "ISO-8859-1");
        
        SETTINGS = new ConstrainedMap(ValidatorFactory.getDefault().newValidator(builder.build()));
    }
    
}
]]></programlisting>
        </example>
        In the example above, we build <literal>SETTINGS</literal> map with 3
        constrained properties.
    </para>
    
    <para>
        The next step is to modify values.
        <example xml:id="constrained-map-modification">
            <title>Modifying property values</title>
            
<programlisting language="java"><![CDATA[
// changing single property
try {
    Configuration.SETTINGS.setValue("session.timeout", 60);
} catch (ValidationException e) {
    e.printViolations();
}

// changing multiple properties
ConstrainedMap.Transaction tx = Configuration.SETTINGS.newTransaction();
tx.setValue("admin.email", "foxinboxx@gmail.com");
tx.setValue("session.timeout", 5);
tx.setValue("output.encoding", "UTF-8");
try {
    tx.commit(false);
    System.out.println(Configuration.SETTINGS);
} catch (ValidationException e) {
    e.printViolations();
}]]></programlisting>
        
        </example>
    </para>
    
    <note>
        <para>
            <link xl:href="http://foxlabs.org/p/validation/1.0/browse/api/org/foxlabs/validation/ConstrainedMap.html"><literal>ConstrainedMap</literal></link>
            validates property values internally when you change them. So if
            you need to change multiple properties it is better to use
            transaction. Also transaction needed if you want to read a number
            of properties and avoid inconsistency in multithreaded environment.
        </para>
    </note>
    
    <para>
        If you need to store (or restore) property values in a file or stream
        the code below can be helpful.
        <example xml:id="constrained-map-persistence">
            <title>Storing and restoring property values</title>
            
<programlisting language="java"><![CDATA[
File file = new File("settings.properties");
Configuration.SETTINGS.save(file, "My configuration");
try {
    Configuration.SETTINGS.load(file);
} catch (ValidationException e) {
    e.printViolations();
}
]]></programlisting>
        
        </example>
    </para>
</chapter>
