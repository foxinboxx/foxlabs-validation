<?xml version="1.0" encoding="utf-8"?>
<chapter xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="getting-started">
    <title>Getting started</title>
    
    <para>
        In this chapter, we consider a simple example that will give basic
        knowledge on the use of this framework. For this you need 
        <link xl:href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK</link>
        1.6 or higher and <link xl:href="http://http://maven.apache.org/">Apache Maven</link>.
    </para>
    
    <section xml:id="maven-setup">
        <title>Maven setup</title>
        
        <para>
            In the <literal>pom.xml</literal> file you need to add the
            following dependency:
            
            <example xml:id="maven-pom-xml">
                <title>The <literal>pom.xml</literal> dependency</title>
                
<programlisting language="xml"><![CDATA[
<dependencies>
    <dependency>
        <groupId>org.foxlabs</groupId>
        <artifactId>foxlabs-validation</artifactId>
        <version>1.0</version>
    </dependency>
</dependencies>
]]></programlisting>
            
            </example>
            No other dependencies are required.
        </para>
    </section>
    
    <section xml:id="writing-bean">
        <title>Writing bean</title>
        
        <para>
            Lets create an <literal>Account</literal> class.
            
            <example xml:id="account-bean-class">
                <title>Account bean class</title>
                
<programlisting language="java"><![CDATA[
import org.foxlabs.validation.constraint.*;

public class Account {
    
    private Long id;
    private String username;
    private String email;
    private String password;
    
    @NotNull
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    @Coalesce @NotEmpty
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    @Despace @NotEmpty @EmailAddress
    public String getEmail() {
        return email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    
    @NotEmpty @Size(min = 6, max = 32)
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    
}
]]></programlisting>
            
            </example>
            
            Here you define the following constraints:
            <itemizedlist>
                <listitem><para><literal>id</literal> should never be <literal>null</literal>.</para></listitem>
                <listitem><para><literal>username</literal> should never be empty, all extra whitespaces will be removed.</para></listitem>
                <listitem><para><literal>email</literal> should be non-empty valid email address, all whitespaces will be removed.</para></listitem>
                <listitem><para><literal>password</literal> should be non-empty with length from 6 to 32 characters.</para></listitem>
            </itemizedlist>
        </para>
    </section>
    
    <section xml:id="validating-bean">
        <title>Validating bean</title>
        
        <para>
            In order to validate bean you need a few lines of code.
            
            <example xml:id="bean-validation-code">
                <title>Bean validation code</title>
                
<programlisting language="java"><![CDATA[
Account account = new Account();
account.setId(1L);
account.setUsername("Fox Mulder");
account.setEmail("foxinboxx@gmail.com");
account.setPassword("The truth is out there");

Validator<Account> validator = ValidatorFactory.getDefault().newValidator(Account.class);
try {
    validator.validateEntity(account);
} catch (ValidationException e) {
    e.printViolations();
}
]]></programlisting>
            
            </example>
            
            In the example above, we create a new <literal>Account</literal>,
            initialize its properties and perform validation. All violations
            will be printed to the <literal>System.err</literal>. You can
            experiment with the values ​​of the properties to see validation
            results.
        </para>
    </section>
</chapter>
